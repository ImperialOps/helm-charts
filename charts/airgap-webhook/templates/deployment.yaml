apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: airgap-webhook
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.admission.autoscaling.enabled }}
  replicas: {{ .Values.admission.replicaCount }}
  {{- end }}
  {{- if .Values.admission.updateStrategy }}
  strategy: {{- toYaml .Values.admission.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: airgap-webhook
  template:
    metadata:
      {{- if .Values.admission.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.admission.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: airgap-webhook
        {{- if .Values.admission.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.admission.podLabels "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "admission.serviceAccountName" . }}
      {{- include "admission.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.admission.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.admission.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.admission.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.admission.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.admission.podAffinityPreset "component" "airgap-webhook" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.admission.podAntiAffinityPreset "component" "airgap-webhook" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.admission.nodeAffinityPreset.type "key" .Values.admission.nodeAffinityPreset.key "values" .Values.admission.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.admission.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.admission.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.admission.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.admission.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.admission.priorityClassName }}
      priorityClassName: {{ .Values.admission.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.admission.schedulerName }}
      schedulerName: {{ .Values.admission.schedulerName | quote }}
      {{- end }}
      {{- if .Values.admission.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.admission.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.admission.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.admission.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.admission.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.admission.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "admission.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/airgap-webhook
          securityContext: {{- include "common.tplvalues.render" (dict "value" .Values.volumePermissions.containerSecurityContext "context" $) | nindent 12 }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
        {{- end }}
        {{- if .Values.admission.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.admission.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: admission-controller
          image: {{ template "admission.image" . }}
          imagePullPolicy: {{ .Values.admission.image.pullPolicy }}
          {{- if .Values.admission.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.admission.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.admission.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.admission.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.admission.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.admission.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: DEBUG
              value: {{ ternary "true" "false" (or .Values.admission.image.debug .Values.diagnosticMode.enabled) | quote }}
            {{- if .Values.admission.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.admission.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.admission.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.admission.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.admission.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.admission.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.admission.resources }}
          resources: {{- toYaml .Values.admission.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: webhook
              containerPort: {{ .Values.admission.containerPorts.webhook }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.admission.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.admission.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.admission.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.admission.containerPorts.webhook }}
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.admission.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.admission.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.admission.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.admission.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.admission.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.admission.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.admission.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.admission.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.admission.containerPorts.webhook }}
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.admission.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.admission.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.admission.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.admission.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.admission.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.admission.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.admission.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.admission.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.admission.containerPorts.webhook }}
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.admission.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.admission.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.admission.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.admission.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.admission.startupProbe.failureThreshold }}
          {{- end }}
          {{- end }}
          {{- if .Values.admission.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.admission.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tls
              mountPath: "/etc/ssl/"
              readOnly: true
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
          {{- if .Values.admission.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.admission.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.admission.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.admission.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: tls
          secret:
            secretName: {{ include "admission.webhook.secretName" . }}
            optional: false
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "common.names.fullname" .) .Values.persistence.existingClaim }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.admission.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.admission.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
